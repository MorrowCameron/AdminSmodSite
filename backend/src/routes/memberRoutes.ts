import { Express, Request, Response } from 'express';
import { MemberPageProvider } from '../MemberPageProvider';
import { verifyAuthToken } from '../middleware/VerifyAuthToken';
import { imageMiddlewareFactory, handleImageFileErrors } from '../middleware/imageUploadMiddleware';
import { IAPIMemberData } from '../shared/DatabaseHelper';

export function registerMemberRoutes(app: Express, provider: MemberPageProvider) {
  // GET all members
  app.get('/api/members', async (_req: Request, res: Response) => {
    try {
      const data = await provider.getAllMembers();
      const formatted = data.map(member => ({
        _id: member._id,
        id: member._id?.toString(), // Changed from (member._id as ObjectId).toString() to member.id
        first_name: member.first_name,
        middle_name: member.middle_name,
        last_name: member.last_name,
        src: member.src,
        alt: member.alt,
      }));
      res.json(formatted);
    } catch (err) {
      console.error('Failed to fetch members:', err);
      res.status(500).json({ error: 'Failed to fetch members' });
    }
  });

  // POST a new member (no image upload, optional use)
  app.post('/api/members', verifyAuthToken, async (req: Request, res: Response) => {
    try {
      const member = req.body;
      const result = await provider.addMember(member);

      const saved: IAPIMemberData = {
        _id: result._id, // Handle possible undefined
        id: '',
        first_name: result.first_name,
        middle_name: result.middle_name,
        last_name: result.last_name,
        src: result.src,
        alt: result.alt,
      };

      res.status(201).json(saved);
    } catch (err) {
      console.error('Failed to add member:', err);
      res.status(400).json({ error: 'Failed to add member' });
    }
  });

  // DELETE member by ID
  app.delete('/api/members/:id', verifyAuthToken, async (req: Request, res: Response) => {
    try {
      await provider.deleteMemberById(req.params.id);
      res.sendStatus(204);
    } catch (err) {
      console.error('Failed to delete member:', err);
      res.status(400).json({ error: 'Failed to delete member' });
    }
  });

  // POST full member (with image and metadata in same form)
  app.post(
    '/api/members/full',
    verifyAuthToken,
    imageMiddlewareFactory.single('image'),
    handleImageFileErrors,
    async (req: Request, res: Response) => {
      try {
        if (!req.file) {
          res.status(400).json({ error: 'No image uploaded' });
          return;
        }

        const { first_name, middle_name, last_name, alt } = req.body;

        if (!first_name || !last_name) {
          res.status(400).json({ error: 'First and last name are required' });
          return;
        }

        const newMember = {
          first_name,
          middle_name,
          last_name,
          src: `/uploads/${req.file.filename}`,
          alt,
        };

        const newMemberWithId = {
          id: '', // Placeholder, as the ID will be generated by the database
          first_name,
          middle_name,
          last_name,
          src: `/uploads/${req.file.filename}`,
          alt,
        };

        const result = await provider.addMember(newMemberWithId);

        const saved: IAPIMemberData = {
          id: result._id ? result._id.toString() : '', // Handle possible undefined
          first_name: result.first_name,
          middle_name: result.middle_name,
          last_name: result.last_name,
          src: result.src,
          alt: result.alt,
        };

        res.status(201).json(saved);
      } catch (err) {
        console.error('Failed to create full member:', err);
        res.status(500).json({ error: 'Failed to add member with image' });
      }
    }
  );
}
